{"version":3,"sources":["components/FileField.jsx","components/CheckBox.jsx","components/PreviewProcessedData.jsx","utils.js","App.jsx","index.js"],"names":["FileField","value","onChange","useState","filesNumber","setFilesNumber","filesNameList","setFilesNameList","className","type","id","event","files","target","length","name","filesData","i","reader","FileReader","onload","push","result","readAsText","accept","multiple","htmlFor","size","CheckBox","isChecked","checked","PreviewProcessedData","data","sheetToArrayBuffer","s","buf","ArrayBuffer","view","Uint8Array","charCodeAt","downloadFinalXLSX","saveAs","Blob","App","fileData","setFileData","processedData","setProcessedData","checkbox","setCheckbox","processedDataFromMultipleFiles","createExcelFileDependingOnCheckboxState","wb","XLSX","utils","book_new","SheetNames","ws_header","ws_data_set","flat","map","person","Object","keys","key","Sheets","aoa_to_sheet","forEach","el","index","ws_data","write","bookType","createExcelFile2","createExcelFile","disabled","onClick","JSON","parse","r1","r2","ils","fzl","izl","ozl","dto1","dfr21","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.11072c5d.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport { AiOutlinePaperClip } from \"react-icons/ai\";\r\n\r\nconst FileField = ({value, onChange}) => {\r\n    const [filesNumber, setFilesNumber] = useState(null);\r\n    const [filesNameList, setFilesNameList] = useState(null);\r\n    \r\n    const onFileChangeHandler = (event) => {\r\n        const {files} = event.target;\r\n        setFilesNumber(files.length)\r\n        setFilesNameList(files[0].name)\r\n        \r\n        if (files !== ' ') {\r\n            \r\n            if (files.length) {\r\n\r\n                let filesData = [];\r\n                let i = 0;\r\n\r\n                const reader = new FileReader();\r\n                reader.onload = (event) => {\r\n                    i++; \r\n                    filesData.push(event.target.result);    \r\n                    if (i < files.length) reader.readAsText(files[i]);\r\n                    if (i === files.length) onChange(filesData);\r\n                }           \r\n\r\n                if (i === 0) reader.readAsText(files[0]);\r\n            }\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <div className = \"input-field\">\r\n            <p>Шаг 1</p>\r\n            <input  type=\"file\" \r\n                    id=\"inputFile\" \r\n                    onChange={onFileChangeHandler} \r\n                    accept=\" .txt\" \r\n                    multiple=\"multiple\"/>\r\n            <label htmlFor=\"inputFile\" className=\"input-field-label\"> \r\n                    {\r\n                        (filesNumber > 1) \r\n                        ? `Выбрано файлов: ${filesNumber}` \r\n                        : (filesNumber === 1) \r\n                        ? filesNameList\r\n                        : (<>Выбрать файлы <AiOutlinePaperClip size=\"25px\"/></>)\r\n                    }\r\n            </label>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FileField;","import React from 'react';\r\n\r\nconst CheckBox = ({onChange}) => {\r\n    const onCheckboxChangeHandler = (event) => {\r\n        let isChecked = event.target.checked;\r\n        onChange(isChecked);\r\n    }\r\n\r\n    return (\r\n        <div className =\"checkbox-container\">\r\n            <input type=\"checkbox\" id=\"checkbox\" className=\"checkbox\" onChange={onCheckboxChangeHandler}/>\r\n            <label htmlFor=\"checkbox\" className=\"checkbox-label\">Отображать каждый файл на отдельном листе</label> \r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default CheckBox;","const PreviewProcessedData = ({data}) => {\r\n    if (!data) return null;\r\n\r\n    return (\r\n        <div className=\"processed-data-message\">Данные обработаны!</div>\r\n    );\r\n}\r\n\r\nexport default PreviewProcessedData","import XLSX from \"xlsx\";\r\nimport { saveAs } from 'file-saver';\r\n\r\nconst createExcelFile = (data) => {\r\n    let wb = XLSX.utils.book_new();\r\n    wb.SheetNames.push(\"Свод\");\r\n\r\n    const ws_header = ['Страховой номер','Фамилия','Имя','Отчество','Дата увольнения','Дата приема - перевода'];\r\n    const ws_data_set = data.flat().map((person) => Object.keys(person).map(key => ([\r\n        [person[key].value]])));\r\n\r\n    wb.Sheets[\"Свод\"] = XLSX.utils.aoa_to_sheet([ws_header, ...ws_data_set]);\r\n\r\n    return XLSX.write(wb, {bookType:'xlsx',  type: 'binary'});\r\n  } \r\n\r\nconst createExcelFile2 = (data) => {\r\n    let wb = XLSX.utils.book_new();\r\n\r\n    wb.SheetNames.push(\"Свод\");\r\n    const ws_header = ['Страховой номер','Фамилия','Имя','Отчество','Дата увольнения','Дата приема - перевода'];\r\n    const ws_data_set = data.flat().map((person) => Object.keys(person).map(key => ([\r\n      [person[key].value]])));\r\n\r\n    wb.Sheets[\"Свод\"] = XLSX.utils.aoa_to_sheet([ws_header, ...ws_data_set]);\r\n\r\n    data.forEach((el, index) => {\r\n      wb.SheetNames.push(`Sheet ${index+1}`)\r\n      const ws_data = el.map((person) => Object.keys(person).map(key => ([\r\n        [person[key].value]])));\r\n      wb.Sheets[`Sheet ${index+1}`] = XLSX.utils.aoa_to_sheet([ws_header, ...ws_data]);\r\n    })\r\n\r\n    return XLSX.write(wb, {bookType:'xlsx',  type: 'binary'});\r\n  } \r\n\r\nconst sheetToArrayBuffer = (s) => {\r\n  const buf = new ArrayBuffer(s.length);\r\n  let view = new Uint8Array(buf);\r\n  for (let i=0; i<s.length; i++) view[i] = s.charCodeAt(i) & 0xFF;\r\n\r\n  return buf;    \r\n}     \r\n\r\nconst downloadFinalXLSX = (data) => {\r\n  saveAs(new Blob([sheetToArrayBuffer(data)],{type:\"application/octet-stream\"}), 'test.xlsx');\r\n}\r\n\r\n\r\n\r\nexport { createExcelFile, createExcelFile2, downloadFinalXLSX }\r\n\r\n\r\n  \r\n","import React, {useState} from \"react\";\r\n\r\nimport FileField from \"./components/FileField\";\r\nimport CheckBox from \"./components/CheckBox\";\r\n\r\nimport PreviewProcessedData from \"./components/PreviewProcessedData\";\r\n\r\nimport {createExcelFile, createExcelFile2, downloadFinalXLSX} from \"./utils.js\"\r\n\r\nimport { BsDownload } from \"react-icons/bs\";\r\n\r\nconst App = () => {\r\n  const [fileData, setFileData] = useState(null);\r\n  const [processedData, setProcessedData] = useState(null);\r\n  const [checkbox, setCheckbox] = useState(null);\r\n\r\n  let processedDataFromMultipleFiles = [];\r\n  \r\n  const getProcessedData = (initialData) => {\r\n  \r\n    initialData.forEach(el => processedDataFromMultipleFiles.push(JSON.parse(el)\r\n      .data\r\n      .map(({r1, r2, ils, fzl, izl, ozl}) => ({\r\n            ils: {\r\n              value: ils || \"\",\r\n              name: \"Страховой номер\"\r\n            }, \r\n            fzl: {\r\n              value: fzl || \"\",\r\n              name: \"Фамилия\"\r\n            },\r\n            izl: {\r\n              value: izl || \"\",\r\n              name: \"Имя\"\r\n            },\r\n            ozl: {\r\n              value: ozl || \"\",\r\n              name: \"Отчество\"\r\n            },\r\n            dto1: {\r\n              value: r1[0].dto1 || \"\",\r\n              name: \"Дата увольнения\"\r\n            },\r\n            dfr21: {\r\n              value: r2[0].dfr21 || \"\",\r\n              name: \"Дата приема - перевода\"\r\n            },\r\n          }))\r\n        ))\r\n\r\n    return processedDataFromMultipleFiles;\r\n  }\r\n\r\n  const createExcelFileDependingOnCheckboxState = (data) => {\r\n    (!checkbox) ? downloadFinalXLSX(createExcelFile(data)) : downloadFinalXLSX(createExcelFile2(data))\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n\r\n      <div className=\"fileFieldAndCheckBox\">\r\n      <FileField\r\n        value={fileData}\r\n        onChange={setFileData}\r\n      />\r\n\r\n      <CheckBox\r\n        value={checkbox}\r\n        onChange={setCheckbox}\r\n      />\r\n      </div>\r\n\r\n      <div className =\"process-button\">\r\n        <p>Шаг 2</p>\r\n        <button \r\n          disabled={!fileData}   \r\n          onClick={() => setProcessedData(\r\n            getProcessedData(fileData)\r\n          )}>\r\n          Обработать файлы\r\n        </button>\r\n        <PreviewProcessedData data={processedData}/>\r\n      </div>\r\n\r\n      <div className =\"download-button\">\r\n        <p>Шаг 3</p>\r\n        <button \r\n          disabled={!processedData}\r\n          onClick={()=>createExcelFileDependingOnCheckboxState(processedData)}><span>Скачать <BsDownload size =\"25px\"/></span></button>\r\n      </div>\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}